// Generate .d.ts from Zod schemas in src/schemas.ts (TSXç‰ˆ)
import fs from 'fs/promises';
import path from 'path';
import { zodToTs, printNode } from 'zod-to-ts';
import {
  CandleTypeEnum,
  RenderChartSvgInputSchema,
  RenderChartSvgOutputSchema,
  ChartPayloadSchema,
  GetIndicatorsDataSchema,
  GetIndicatorsMetaSchema,
} from '../src/schemas.js';

const outPath = path.join(process.cwd(), 'src/types/schemas.generated.d.ts');

function section(title: string): string {
  return `\n// === ${title} ===\n`;
}

const chunks: string[] = [];
chunks.push('// Auto-generated by tools/gen_types.ts. Do NOT edit manually.');
chunks.push('/* eslint-disable */');

// Enums and inputs
chunks.push(section('Enums & Inputs'));
{
  const { node } = zodToTs(CandleTypeEnum, 'CandleType');
  chunks.push(`export type CandleType = ${printNode(node)};`);
}
{
  const { node } = zodToTs(RenderChartSvgInputSchema, 'RenderChartSvgInput');
  chunks.push(`export type RenderChartSvgInput = ${printNode(node)};`);
}
{
  const { node } = zodToTs(RenderChartSvgOutputSchema, 'RenderChartSvgOutput');
  chunks.push(`export type RenderChartSvgOutput = ${printNode(node)};`);
}

// Indicators
chunks.push(section('Indicators DTOs'));
{
  const { node } = zodToTs(ChartPayloadSchema, 'ChartPayloadFromSchema');
  chunks.push(`export type ChartPayloadFromSchema = ${printNode(node)};`);
}
{
  const { node } = zodToTs(GetIndicatorsDataSchema, 'GetIndicatorsDataFromSchema');
  chunks.push(`export type GetIndicatorsDataFromSchema = ${printNode(node)};`);
}
{
  const { node } = zodToTs(GetIndicatorsMetaSchema, 'GetIndicatorsMetaFromSchema');
  chunks.push(`export type GetIndicatorsMetaFromSchema = ${printNode(node)};`);
}

const content = chunks.join('\n');
await fs.mkdir(path.dirname(outPath), { recursive: true });
await fs.writeFile(outPath, content, 'utf8');
console.log(`Generated: ${path.relative(process.cwd(), outPath)}`);


